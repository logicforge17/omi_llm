Metadata-Version: 2.4
Name: PyOgg
Version: 0.7
Summary: Xiph.org's Ogg Vorbis, Opus and FLAC for Python
Home-page: https://github.com/Zuzu-Typ/PyOgg
Author: Zuzu_Typ
Author-email: zuzu.typ@gmail.com
License: BSD 3-clause "New" or "Revised"
Keywords: Xiph ogg vorbis opus flac sound playback audio
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/x-rst
License-File: LICENSE
License-File: COPYING
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: summary

PyOgg provides Python bindings for Xiph.org's
`Opus <https://www.opus-codec.org/>`_,
`Vorbis <https://xiph.org/vorbis/>`_
and `FLAC <https://xiph.org/flac/>`_
audio file formats as well as their
`Ogg <https://www.xiph.org/ogg/>`_ container format.

PyOgg:

* Reads and streams Opus, Vorbis, and FLAC audio formats in their
  standard file format (that is, from within Ogg containers).
* Writes Opus files (that it, Opus-formatted packets into Ogg
  containers)
* Reads and writes Opus-formatted packets (transported, for example,
  via UDP)

Further, should you wish to have still lower-level access, PyOgg
provides `ctypes <https://docs.python.org/3/library/ctypes.html>`_
interfaces that give direct access to the C functions and datatypes
found in the libraries.
  
Under Windows, PyOgg comes bundled with the required dynamic libraries
(DLLs) in the Windows Wheel distributions.

Under macOS, the required libraries can be easily installed using
`Homebrew <https://brew.sh/>`_.

PyOgg is not capable of playing audio, however, you can use Python
audio libraries such as `simpleaudio
<https://pypi.org/project/simpleaudio/>`_, `sounddevice
<https://pypi.org/project/sounddevice/>`_, or `PyOpenAL
<https://pypi.org/project/PyOpenAL/>`_ to play audio.  PyOpenAL even
offers 3D playback.
